using System;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using System.Collections.Generic;
using Newtonsoft.Json;

// Main Program Logic using Top-Level Statements
ConfigManager.LoadConfig();

while (true)
{
    UIManager.ShowMainMenu();
    string? choice = UIManager.Prompt("Select an option");

    switch (choice)
    {
        case "1":
            await HandleConvertFile();
            break;
        case "2":
            HandleSetDestination();
            break;
        case "0":
            UIManager.DisplayMessage("Exiting application. Goodbye!", ConsoleColor.DarkYellow);
            return;
        default:
            UIManager.DisplayError("Invalid option, please try again.");
            UIManager.Pause();
            break;
    }
}

// --- Handlers for Menu Options ---

static async Task HandleConvertFile()
{
    UIManager.DrawHeader("Convert Chat Log to Markdown");
    string? inputFile = null;

    while (true)
    {
        inputFile = UIManager.Prompt("Enter the path to the input JSON file");
        if (string.IsNullOrWhiteSpace(inputFile))
        {
            UIManager.DisplayError("File path cannot be empty.");
            continue;
        }
        if (!File.Exists(inputFile))
        {
            UIManager.DisplayError($"File not found: '{inputFile}'. Please try again.");
            continue;
        }
        break;
    }

    try
    {
        UIManager.DisplayMessage("\nStarting conversion...", ConsoleColor.Cyan);
        string outputFileName = $"{Path.GetFileNameWithoutExtension(inputFile)}.md";
        string outputDirectory = ConfigManager.GetDestinationPath();
        string outputPath = Path.Combine(outputDirectory, outputFileName);

        await Converter.ConvertJsonToMarkdown(inputFile, outputPath);

        UIManager.DisplaySuccess($"\nConversion successful! Markdown file saved to:\n{outputPath}");
    }
    catch (Exception ex)
    {
        UIManager.DisplayError($"An error occurred during conversion: {ex.Message}");
    }
    UIManager.Pause();
}

static void HandleSetDestination()
{
    UIManager.DrawHeader("Set Output Destination");
    string? destination = null;

    while (true)
    {
        destination = UIManager.Prompt("Enter the new destination folder path");
        if (string.IsNullOrWhiteSpace(destination))
        {
            UIManager.DisplayError("Destination path cannot be empty.");
            continue;
        }
        if (!Directory.Exists(destination))
        {
            UIManager.DisplayError($"Directory not found: '{destination}'. Please create it or try again.");
            continue;
        }
        break;
    }

    ConfigManager.SaveConfig(destination);
    UIManager.DisplaySuccess($"Output destination has been updated to: {destination}");
    UIManager.Pause();
}


// --- Core Conversion Logic ---

public static class Converter
{
    public static async Task ConvertJsonToMarkdown(string inputFile, string outputFile)
    {
        string jsonContent = await File.ReadAllTextAsync(inputFile);
        var chatLog = JsonConvert.DeserializeObject<ChatLog>(jsonContent);

        if (chatLog?.ChunkedPrompt?.Chunks == null)
        {
            throw new InvalidDataException("JSON file is not in the expected format or contains no chunks.");
        }

        var markdownBuilder = new StringBuilder();

        // --- NEW: Create and add the main title from the filename ---
        string title = Path.GetFileNameWithoutExtension(inputFile).Replace('_', ' ');
        markdownBuilder.AppendLine($"# Chat Log: {title}");
        markdownBuilder.AppendLine();

        foreach (var chunk in chatLog.ChunkedPrompt.Chunks)
        {
            // Ignore thoughts generated by the AI model
            if (chunk.IsThought)
            {
                continue;
            }

            if (chunk.Role == "user")
            {
                // --- NEW: User message format ---
                markdownBuilder.AppendLine("## 👤 User Query");
                markdownBuilder.AppendLine("---");
                markdownBuilder.AppendLine(chunk.Text?.Trim());
                markdownBuilder.AppendLine();
            }
            else if (chunk.Role == "model")
            {
                // --- NEW: AI Response format ---
                markdownBuilder.AppendLine("## 🤖 AI Response");
                markdownBuilder.AppendLine("---");
                markdownBuilder.AppendLine(chunk.Text?.Trim());
                markdownBuilder.AppendLine();
            }
        }

        await File.WriteAllTextAsync(outputFile, markdownBuilder.ToString());
    }
}


// --- UI and UX Helper Class ---

public static class UIManager
{
    public static void DrawHeader(string title)
    {
        Console.Clear();
        Console.ForegroundColor = ConsoleColor.Cyan;
        Console.WriteLine("==================================================");
        Console.WriteLine($"      {title}");
        Console.WriteLine("==================================================");
        Console.ResetColor();
        Console.WriteLine();
    }

    public static void ShowMainMenu()
    {
        DrawHeader("Chat to Markdown Converter");
        Console.WriteLine("Please choose an option:\n");
        Console.WriteLine("  [1] Convert a JSON chat file");
        Console.WriteLine("  [2] Set output destination folder");
        Console.WriteLine("  [0] Exit");
        Console.WriteLine();
        DisplayMessage($"Current Destination: {ConfigManager.GetDestinationPath()}", ConsoleColor.DarkGray);
        Console.WriteLine();
    }

    public static string? Prompt(string message)
    {
        Console.ForegroundColor = ConsoleColor.Yellow;
        Console.Write($"{message}: ");
        Console.ResetColor();
        return Console.ReadLine();
    }

    public static void DisplayMessage(string message, ConsoleColor color)
    {
        Console.ForegroundColor = color;
        Console.WriteLine(message);
        Console.ResetColor();
    }

    public static void DisplaySuccess(string message) => DisplayMessage(message, ConsoleColor.Green);
    public static void DisplayError(string message) => DisplayMessage(message, ConsoleColor.Red);

    public static void Pause()
    {
        DisplayMessage("\nPress any key to continue...", ConsoleColor.DarkGray);
        Console.ReadKey();
    }
}


// --- Configuration Management ---

public static class ConfigManager
{
    private const string ConfigFileName = "converter_settings.conf";
    private static string _outputDestination = string.Empty;

    public static void LoadConfig()
    {
        if (File.Exists(ConfigFileName))
        {
            _outputDestination = File.ReadAllText(ConfigFileName).Trim();
        }

        // If config is invalid or doesn't exist, use default.
        if (string.IsNullOrWhiteSpace(_outputDestination) || !Directory.Exists(_outputDestination))
        {
            _outputDestination = AppContext.BaseDirectory;
        }
    }

    public static void SaveConfig(string destinationPath)
    {
        File.WriteAllText(ConfigFileName, destinationPath);
        _outputDestination = destinationPath;
    }

    public static string GetDestinationPath() => _outputDestination;
}


// --- JSON Deserialization Models ---

public class ChatLog
{
    [JsonProperty("chunkedPrompt")]
    public ChunkedPrompt? ChunkedPrompt { get; set; }
}

public class ChunkedPrompt
{
    [JsonProperty("chunks")]
    public List<Chunk>? Chunks { get; set; }
}

public class Chunk
{
    [JsonProperty("text")]
    public string? Text { get; set; }

    [JsonProperty("role")]
    public string? Role { get; set; }

    [JsonProperty("isThought")]
    public bool IsThought { get; set; }
}